{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComics","_ref5","_callee5","_context5","_x3","comics","_comics$textObjects$","title","description","pageCount","thumbnail","path","extension","language","textObjects","price","prices","char","slice","homepage","urls","wiki","items","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyUp","e","key","TransitionGroup","component","renderItems","disabled","CharInfo","charId","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/7.e21c3451.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst  useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\r\n    const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n        };\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n\treturn {\r\n\t\tclearError,\r\n        process,\r\n        setProcess,\r\n\t\tgetAllCharacters,\r\n        getCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComics,\r\n\t};\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request,clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n            // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyUp={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CharSearchForm;","import {Component} from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n       setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}